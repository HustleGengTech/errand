{% if request.user %}
{% if reviewed_user != request.user %}
<div class="flex items-center space-x-3 mb-4">
    <div class="mt-6 w-full">
        <h2 class="text-lg font-semibold">Leave Reviews</h2>
        <!-- Updated form with HTMX attributes -->
        <form method="POST" 
              hx-post="{% url 'review_page' user.username %}"
              hx-target="#posts-section"
              hx-swap="afterbegin"
              class="flex items-center space-x-4 mt-4">
            {% csrf_token %}
            {% if request.profile.image and profile.image.url != '/media/default.jpg' %}
            <img src="{{ request.user.profile.image.url }}" alt="User" class="w-12 h-12 rounded-full">
            {% else %}
            <img src="{% static 'image/smile.jpeg' %}" alt="Default Profile Image" class="w-10 h-10 rounded-full object-cover border-4 border-white shadow-lg">
            {% endif %}
            <textarea id="text" name="text" required
                class="w-full bg-gray-700 text-white p-3 rounded-lg focus:outline-none"
                placeholder="Write your review..."></textarea>
            <button type="submit" class="bg-blue-500 px-4 py-2 rounded-lg hover:bg-blue-600">Send</button>
        </form>
    </div>
</div>
{% endif %}
posts = Post.objects.all().order_by('-created_at')
    paginator = Paginator(posts, 5)  # 10 posts per page
    page = int(request.GET.get('page',1))
    try:
        posts= paginator.page(page)
    except:
        return HttpResponse('No more post')

    # Ensure Cloudinary URLs are properly generated
    for post in posts:
        if hasattr(post, 'image') and post.image:
            post.image_url = post.image.url  # Explicitly get the URL
    
    
    context = {
        'page': page,
        'posts': posts,
        'profile': request.user.profile,  # Ensure the profile is passed

    }
    if request.htmx:
        return render(request, 'snippets/loop_home_posts.html',context)
    return render(request,'home.html',context)
{% endif %}

@login_required
def review_page(request, username):
    reviewed_user = get_object_or_404(User, username=username)
    reviews = Review.objects.filter(reviewed_user=reviewed_user).order_by('-created_at')
    profile = reviewed_user.profile

    # Get all reviews and paginate them
    all_reviews = Review.objects.filter(reviewed_user=reviewed_user).order_by('-created_at')
    paginator = Paginator(all_reviews, 5)  # 5 reviews per page
    page_number = request.GET.get('page', 1)
    try:
        reviews_page = paginator.page(page_number)
    except:
        reviews_page = paginator.page(1)

    if request.method == 'POST':
        text = request.POST.get('text')
        
        if text:
            # Create the review
            new_review = Review.objects.create(
                reviewer=request.user,
                reviewed_user=reviewed_user,
                text=text
            )
            
            # HTMX response - return just the new review
            if request.headers.get('HX-Request'):
                context = {
                    'review': new_review,
                    'request': request  # Pass request for user authentication checks
                }
                return render(request, 'partials/reviewsent.html', context)
            
            # Regular form submission fallback
            return redirect(reverse('review_page', kwargs={'username': reviewed_user.username}))

    # HTMX GET request handling (for potential future use)
    if request.headers.get('HX-Request'):
        context = {
            'reviews': reviews,
            'profile': profile,
            'user': reviewed_user,
            'request': request,
            'reviews_page': reviews_page,
        }
        return render(request, 'partials/reviewsent.html', context)

    # Regular GET request
    return render(request, 'reviews.html', {
        'user': reviewed_user,
        'reviews': reviews,
        'profile': profile,
        'reviews_page': reviews_page,
    })
